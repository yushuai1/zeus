向大家介绍一种很不错，也是Linux中的权限管理算法。

　　定义a^b为：a的b次方

　　假如，我们为每一个操作设定一个唯一的整数值，比如：

　　删除A---0

　　修改A---1

　　添加A---2

　　删除B---3

　　修改B---4

　　添加B---5

　　。。。

　　理论上可以有N个操作，这取决于你用于储存用户权限值的数据类型了。

　　这样，如果用户有权限：添加A---2;删除B---3;修改B---4

　　那用户的权限值 purview =2^2+2^3+2^4=28，也就是2的权的和了

　　化成二进制可以表示为11100

　　如果要验证用户是否有删除B的权限，就可以通过位与运算来实现。

　　在Java里，位与运算运算符号为&

　　即是：int value = purview &((int)Math.pow(2,3));

　　你会发现，当用户有操作权限时，运算出来的结果都会等于这个操作需要的权限值!

　　原理：

　　位与运算，顾名思义就是对位进行与运算：

　　以上面的式子为例：purview &2^3 也就是　28&8

　　将它们化成二进制有

　　11100

　　& 01000

　　-------------------

　　01000 == 8(十进制)　==　2^3

　　同理，如果要验证是否有删除A---0的权限

　　可以用：purview &((int)Math.pow(2,0));

　　即：

　　11100

　　& 00001

　　------------------------

　　00000 == 0(十进制)　　!=　2^0

　　这种算法的一个优点是速度快。可以同时处理N个权限，设置N种角色.


　　处理多个权限：

                                 如果想验证是否同时有删除A---0和删除B---3的权限

　　                          可以用purview&(2^0+2^3)==(2^0+2^3)?true:false;



　　处理多角色用户：

　　 这里我多加一个示例，把问题说清楚，假设有四个角色，分别有多个不同的权限，多个权限构成一个角色

             角色1：删除A---0，修改A---1，添加A---2，查看A---3

            权限值2^0+2^1+2^2+2^3 = 15   二进制1111

             角色2：删除B---4，修改B---5，添加B---6，查看B---7

             权限值2^4+2^5+2^6+2^7 = 240    二进制11110000

             角色3：删除A---0，修改A---1，添加A---2，查看A---3，删除B---4，修改B---5，添加B---6，查看B---7

             权限值2^0+2^1+2^2+2^3 +2^4+2^5+2^6+2^7= 255 二进制 11111111

             角色4：查看A---3，查看B---7

             权限值 2^3+2^7 = 136   二进制 10001000



   某一个用户拥有角色1--1111和角色4---10001000 的权限，即二进制总权限要为10001111



 (2^0+2^1+2^2+2^3)| (2^3+2^7)=purview（用户总权限值 ） = 143



      根据权限值判断用户的角色，例如判断该用户有没有添加A和查看B的权限



purview&（2^2+2^7）?true:false;



 　　下面提供一个java的单操作权限判断的代码：

Java代码
//userPurview是用户具有的总权限

//optPurview是一个操作要求的权限为一个整数(没有经过权的!)

public static boolean checkPower(int userPurview, int optPurview){

  int purviewValue = (int)Math.pow(2, optPurview);

  return (userPurview &purviewValue) == purviewValue;

}
